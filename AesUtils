package com.servicechain.shareservice.util;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import org.springframework.util.Base64Utils;

/**
 * AES128加密、解密：base64Encode utf-8
 * 随机生成AES_KEY
 */
public class AesUtils {

//	public static String AES_KEY = "pjbbAvaE8faDOjYvqMPIMQ=="; //AES_KEY一般是约定的
	public static void main(String[] args) throws Exception {
		//生成AES_KEY
		System.out.println("随机生成AES_KEY:"+generateKey());
		String AES_KEY = generateKey();
		//加密调用例子
		String str = "11111111";//原始数据
		String resultStr = AesUtils.encrypt(str, AES_KEY);
		System.out.println("AES128加密后:"+resultStr);
		//解密调用例子
		String originalStr = AesUtils.decrypt(resultStr, AES_KEY);
		System.out.println("AES128解密后--原始数据:"+originalStr);
	}
	
	//随机生成AES_KEY
	public static String generateKey() throws NoSuchAlgorithmException {
		KeyGenerator generator = KeyGenerator.getInstance("AES");
		generator.init(128);
		SecretKey key = generator.generateKey();
		return base64Encode(key.getEncoded());
	}

	//加密
	public static String encrypt(String data, String keyEncoded)
			throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException,
			BadPaddingException, UnsupportedEncodingException {
		Cipher cipher = Cipher.getInstance("AES");
		SecretKey key = new SecretKeySpec(base64Decode(keyEncoded), "AES");
		cipher.init(Cipher.ENCRYPT_MODE, key);
		byte[] result = cipher.doFinal(data.getBytes("utf-8"));
		return base64Encode(result);
	}

	//解密
	public static String decrypt(String data, String keyEncoded)
			throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException,
			BadPaddingException, UnsupportedEncodingException {
		Cipher cipher = Cipher.getInstance("AES");
		SecretKey key = new SecretKeySpec(base64Decode(keyEncoded), "AES");
		cipher.init(Cipher.DECRYPT_MODE, key);
		byte[] result = cipher.doFinal(base64Decode(data));
		return new String(result, "utf-8");
	}

	private static String base64Encode(byte[] src) {
		return Base64Utils.encodeToString(src);
	}

	private static byte[] base64Decode(String src) {
		return Base64Utils.decodeFromString(src);
	}

}
